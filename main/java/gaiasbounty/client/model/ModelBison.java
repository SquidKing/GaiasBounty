// Date: 15/08/2014 2:28:30 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package gaiasbounty.client.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

import org.lwjgl.opengl.GL11;

public class ModelBison extends ModelBase
{
   ModelRenderer body;
   ModelRenderer head;
   ModelRenderer chin;
   ModelRenderer leg1;
   ModelRenderer leg2;
   ModelRenderer leg3;
   ModelRenderer leg4;
   ModelRenderer horn1;
   ModelRenderer horn2;
   ModelRenderer horn3;
   ModelRenderer horn4;
   
   protected float translateY = 8.0F;
   protected float translateZ = 4.0F;
   
   public ModelBison()
   {
      textureWidth = 64;
      textureHeight = 32;
      
      body = new ModelRenderer(this, 18, 4);
      body.addBox(-6F, -8F, -7F, 12, 18, 10);
      body.setRotationPoint(0F, 5F, 2F);
      body.setTextureSize(64, 32);
      body.mirror = true;
      setRotation(body, 1.570796F, 0F, 0F);
      head = new ModelRenderer(this, 0, 0);
      head.addBox(-4F, -4F, -6F, 8, 8, 6);
      head.setRotationPoint(0F, 6F, -6F);
      head.setTextureSize(64, 32);
      head.mirror = true;
      setRotation(head, 0F, 0F, 0F);
      chin = new ModelRenderer(this, 52, 0);
      chin.addBox(-1F, 4F, -4F, 2, 4, 3);
      chin.setRotationPoint(0F, 6F, -6F);
      chin.setTextureSize(64, 32);
      chin.mirror = true;
      setRotation(chin, 0F, 0F, 0F);
      leg1 = new ModelRenderer(this, 0, 16);
      leg1.addBox(-3F, 0F, -2F, 4, 12, 4);
      leg1.setRotationPoint(-3F, 12F, 9F);
      leg1.setTextureSize(64, 32);
      leg1.mirror = true;
      setRotation(leg1, 0F, 0F, 0F);
      leg2 = new ModelRenderer(this, 0, 16);
      leg2.addBox(-1F, 0F, -2F, 4, 12, 4);
      leg2.setRotationPoint(3F, 12F, 9F);
      leg2.setTextureSize(64, 32);
      setRotation(leg2, 0F, 0F, 0F);
      leg2.mirror = false;
      leg3 = new ModelRenderer(this, 0, 16);
      leg3.addBox(-3F, 0F, -2F, 4, 12, 4);
      leg3.setRotationPoint(-3F, 12F, -4F);
      leg3.setTextureSize(64, 32);
      leg3.mirror = true;
      setRotation(leg3, 0F, 0F, 0F);
      leg4 = new ModelRenderer(this, 0, 16);
      leg4.addBox(-1F, 0F, -2F, 4, 12, 4);
      leg4.setRotationPoint(3F, 12F, -4F);
      leg4.setTextureSize(64, 32);
      setRotation(leg4, 0F, 0F, 0F);
      leg4.mirror = false;
      horn1 = new ModelRenderer(this, 22, 0);
      horn1.addBox(-7F, -3F, -3F, 3, 1, 1);
      horn1.setRotationPoint(0F, 6F, -6F);
      horn1.setTextureSize(64, 32);
      horn1.mirror = true;
      setRotation(horn1, 0F, 0F, 0F);
      horn2 = new ModelRenderer(this, 22, 0);
      horn2.addBox(4F, -3F, -3F, 3, 1, 1);
      horn2.setRotationPoint(0F, 6F, -6F);
      horn2.setTextureSize(64, 32);
      setRotation(horn2, 0F, 0F, 0F);
      horn2.mirror = true;
      horn3 = new ModelRenderer(this, 22, 2);
      horn3.addBox(-7F, -4F, -3F, 1, 1, 1);
      horn3.setRotationPoint(0F, 6F, -6F);
      horn3.setTextureSize(64, 32);
      horn3.mirror = true;
      setRotation(horn3, 0F, 0F, 0F);
      horn4 = new ModelRenderer(this, 22, 2);
      horn4.addBox(6F, -4F, -3F, 1, 1, 1);
      horn4.setRotationPoint(0F, 6F, -6F);
      horn4.setTextureSize(64, 32);
      setRotation(horn4, 0F, 0F, 0F);
      horn4.mirror = true;
   }
   
   @Override
   public void render(Entity entity, float f, float f1, float f2, float f3,
            float f4, float f5)
   {
      super.render(entity, f, f1, f2, f3, f4, f5);
      setRotationAngles(f, f1, f2, f3, f4, f5, entity);
      
      if (this.isChild)
      {
         float f6 = 2.0F;
         GL11.glPushMatrix();
         GL11.glTranslatef(0.0F, this.translateY * f5, this.translateZ * f5);
         head.render(f5);
         chin.render(f5);
         horn1.render(f5);
         horn2.render(f5);
         horn3.render(f5);
         horn4.render(f5);
         GL11.glPopMatrix();
         GL11.glPushMatrix();
         GL11.glScalef(1.0F / f6, 1.0F / f6, 1.0F / f6);
         GL11.glTranslatef(0.0F, 24.0F * f5, 0.0F);
         body.render(f5);
         leg1.render(f5);
         leg2.render(f5);
         leg3.render(f5);
         leg4.render(f5);
         GL11.glPopMatrix();
      }
      else
      {
         body.render(f5);
         head.render(f5);
         chin.render(f5);
         leg1.render(f5);
         leg2.render(f5);
         leg3.render(f5);
         leg4.render(f5);
         horn1.render(f5);
         horn2.render(f5);
         horn3.render(f5);
         horn4.render(f5);
      }
   }
   
   private void setRotation(ModelRenderer model, float x, float y, float z)
   {
      model.rotateAngleX = x;
      model.rotateAngleY = y;
      model.rotateAngleZ = z;
   }
   
   /**
    * Sets the model's various rotation angles. For bipeds, par1 and par2 are
    * used for animating the movement of arms and legs, where par1 represents
    * the time(so that arms and legs swing back and forth) and par2 represents
    * how "far" arms and legs can swing at most. NOTE: Parameters not properly
    * documented; these values may not accurately represent what is actually
    * being passed.
    * 
    * @param f - Limb swing amount; higher for child mobs
    * @param f1 - Limb swing delta
    * @param f2 - Set by model render class in handleRotationFloat(EntityLivingBase, float)
    * @param f3 - Look vector Y
    * @param f4 - Look vector X
    * @param f5 - Usually 0.0625F
    * @param entity - Reference to an entity using this model
    */
   @Override
   public void setRotationAngles(float f, float f1, float f2, float f3,
            float f4, float f5, Entity entity)
   {
      float f6 = (180F / (float) Math.PI);
      this.head.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.head.rotateAngleY = f3 / (180F / (float) Math.PI);
      this.chin.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.chin.rotateAngleY = f3 / (180F / (float) Math.PI);
      this.horn1.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.horn1.rotateAngleY = f3 / (180F / (float) Math.PI);
      this.horn2.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.horn2.rotateAngleY = f3 / (180F / (float) Math.PI);
      this.horn3.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.horn3.rotateAngleY = f3 / (180F / (float) Math.PI);
      this.horn4.rotateAngleX = f4 / (180F / (float) Math.PI);
      this.horn4.rotateAngleY = f3 / (180F / (float) Math.PI);
      
      this.body.rotateAngleX = ((float) Math.PI / 2F);
      this.leg1.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
      this.leg2.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI)
               * 1.4F * f1;
      this.leg3.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI)
               * 1.4F * f1;
      this.leg4.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
   }
}
